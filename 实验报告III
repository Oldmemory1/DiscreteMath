3.求关系的传递闭包
3.1概述
输入：
一次输入一个关系矩阵，每一行两个相邻元素之间用一个空格隔开，输入元素的行与列分别对应关系矩阵的行与列。关系的基数小于12。
输出：
输出该关系的传递闭包所对应的关系矩阵
3.2步骤流程
用到了书上129页的WarShall算法
首先，建立好WarShall类，其中需要包含2个11*11的数组（Calc和Result），用来存储数据
注意：读入数据前，Calc，Result数组一定要初始化全部为0，防止出现错误。
根据读入的第一行（每次获取数字后，获取数字后一位的字符，如果是空格，证明还没有读完，如果是换行，证明该行已经读完），确定矩阵的大小（DataNum）到底是多少。
根据矩阵的大小，读入后几行数据。
从最左端遍历数组的各列，如果发现a行b列的位置元素为1，则把第b行的所有元素分别加到第a行同样位置上，直到超出矩阵列最大值为止。
将计算用的数组Calc，复制到输出数组Result中，要注意对Calc数组中的元素进行处理，如果为大于1的元素，则重新赋值为1（注意：要区分直接加和逻辑加的区别，逻辑加不可能大于1），如果元素为0，复制过程中直接赋值即可。
根据DataNum的大小，输出二维数组Result中的值，即为对应的关系矩阵。
3.3程序实现
3.3.1用到的类的说明
3.3.1.1WarShall类
用于计算，存储过程中的结果
内部成员有：
公有成员二维数组Calc（用于计算传递闭包用）
公有成员二维数组Result（用于存储结果用）
私有成员DataNum（用于存储矩阵的大小用）
内部成员函数有：
注意：这些函数全是公有的：
Initialization（初始化函数，用于把数组全部初始化为0）
GetData（向Calc数组中读入数据，并且根据输入的数据获取DataNum的值）
OutPutCalc（用于输出Calc数组经过运算后的结果，实际程序运行并未用到此函数，此函数主要是调试过程中使用）
OutPutResult（用于输出Result数组中的结果）
GetResult（根据运算过后的Calc数组，赋值给Result数据，但是Calc数组中大于1的元素在赋值过程中，会赋值1给Result数组相同位置的元素，以避免混淆+和逻辑+的错误，其实计算的函数Cal用重载运算符实现逻辑加或许能减少代码量）
Cal（WarShall算法实现的核心，作用：从最左端遍历数组的各列，如果发现a行b列的位置元素为1，则把第b行的所有元素分别加到第a行同样位置上，直到超出矩阵列最大值为止）
