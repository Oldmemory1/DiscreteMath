4.求偏序求偏序集中的极大元与极小元
4.1概述
输入
输入偏序集<A, £>，A中的元素数不超过20个，分别用单个小写的英文字母表示。
输入的第一行给出A中的各个元素，两个相邻的元素之间用逗号隔开。
输入的第二行给出偏序关系£，用有序对的形式给出(只给出哈斯图中的满足覆盖的两个元素形成的有序对)，如<a,b>,<c,a>等等，两个相邻的有序对之间用逗号隔开。
输出
输出A的极小元与极大元。
输出的第一行给出各个极小元，两个相邻元素之间用逗号隔开，输出的元素要求按照英文字母的自然顺序排列输出。
输出的第二行给出各个极大元，两个相邻元素之间用逗号隔开，输出的元素要求按照英文字母的自然顺序排列输出。
4.2步骤流程
建立好两个类，分别代表哈斯图中的节点，另一个表示连接到的节点的数据。
输入第一行的时候，读入数据，直到换行时停止，建立链表，存储哈斯图中的节点。
输入第二行时，对于每个有序对，均遍历链表，如果发现链表元素的值=偏序关系读入的第一个字符，那么设置链表上的成员HaveBeenASource，显示为有后继元素（即HaveBeenASource=true），并且该节点的临接链表成员ThisisSource中添加一个链表节点，该链表节点成员ConnectedData的值。表示该节点作为某连接线段的头。
如果发现链表元素的值=读入的第二个字符，那么设置链表上的成员HaveBeenEnd，显示为有前继元素（即HaveBeenAnEnd=true），并且该节点的临接链表成员ThisisEnd中添加一个链表节点，该链表节点成员ConnectedData的值。表示该节点作为某连接线段的尾。
读入所有有序对后，再遍历链表，如果链表上的节点的HaveBeenAnEnd成员为false，证明它是极小元，如果HaveBeenASource成员为false，证明他是极大元，分别构建两个队列，记作队列1，队列2，用于存储char类型的元素，如果某元素为极小元，将他的Data成员入队列1，如果某元素为极大元，讲他的Data成员入队列2，直到链表所有的节点全被访问完，此时，输出队列1，队列2中的值，分别代表极小元和极大元。
4.3程序实现
4.3.1用到的类的说明
4.3.1.1
Element类：可作为链表中的节点，表示哈斯图中的元素，内部成员函数有：
这些成员函数全部是公有的：
Create（用于初始化类并且写入类中私有成员Data的值）
GetData（获取类中私有成员Data的值）
GetSerialNumber（获取这个类的序号是多少），GetWhetherItIsAnEnd（获取类中的私有成员HaveBeenAnEnd的值，返回bool型）
GetWhetherItIsASource（获取类中的私有成员HaveBeenASource的值，返回bool型）
OutPutInfotmation（输出类中的一些私有成员的数据，在调试程序时需要使用到，实际程序工作并未使用该函数）
SetItIsAEnd（改变私有成员HaveBeenAnEnd的值）
SetItIsASource（改变私有成员HaveBeenASource的值）
内部成员有：
私有成员：
SerialNumber（表示这个类的序号是多少，用于后面构建链表的时候，便于调试时统计元素数目）
Data（为char型，存储读入的字母）
HaveBeenAnEnd（是否在某个连接中作为连接的结束点）
HaveBeenASource（是否在某个连接中作为连接的起始点）
公有成员：
ThisIsAsource：是一个临接链表，表示此点作为起始点的连接的结束点有什么
ThisIsAnEnd：是一个临接链表，表示此点作为结束点的连接的起始点有什么
NextElement（指针，指向下一个Element类创建的对象）
4.3.1.2
Link类：在邻接链表中起作用，仅仅表示连接到的地址，内部成员函数有：
这些成员函数全部是公有的：
GetConnectedData（输出私有成员ConnectedData的值）
SetConnectedData（初始化类，并且设置私有成员ConnectedData的值）
内部成员有：
私有成员ConnectedData，存储连接到的值。
公有成员NextLink，指针，指向下一个Link类构建出的对象
